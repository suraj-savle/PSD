# ðŸ“‚ Final File Structure

```
PSD/
â”‚â”€â”€ backend/
â”‚   â”œâ”€â”€ prisma/
â”‚   â”‚   â””â”€â”€ schema.prisma
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â”‚   â””â”€â”€ db.js
â”‚   â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â”‚   â””â”€â”€ authMiddleware.js
â”‚   â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”‚   â”œâ”€â”€ auth.js
â”‚   â”‚   â”‚   â”œâ”€â”€ student.js
â”‚   â”‚   â”‚   â”œâ”€â”€ sag.js
â”‚   â”‚   â”‚   â””â”€â”€ finance.js
â”‚   â”‚   â”œâ”€â”€ controllers/
â”‚   â”‚   â”‚   â”œâ”€â”€ authController.js
â”‚   â”‚   â”‚   â”œâ”€â”€ studentController.js
â”‚   â”‚   â”‚   â”œâ”€â”€ sagController.js
â”‚   â”‚   â”‚   â””â”€â”€ financeController.js
â”‚   â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”‚   â””â”€â”€ generateToken.js
â”‚   â”‚   â””â”€â”€ index.js
â”‚   â”œâ”€â”€ .env
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ README.md
â”‚
â”‚â”€â”€ frontend/
â”‚   â”œâ”€â”€ public/
â”‚   â”‚   â””â”€â”€ index.html
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ assets/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ Navbar.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ UploadDocs.jsx
â”‚   â”‚   â”‚   â””â”€â”€ StatusCard.jsx
â”‚   â”‚   â”œâ”€â”€ pages/
â”‚   â”‚   â”‚   â”œâ”€â”€ Login.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Register.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ StudentDashboard.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ SAGDashboard.jsx
â”‚   â”‚   â”‚   â””â”€â”€ FinanceDashboard.jsx
â”‚   â”‚   â”œâ”€â”€ context/
â”‚   â”‚   â”‚   â””â”€â”€ AuthContext.jsx
â”‚   â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”‚   â””â”€â”€ api.js
â”‚   â”‚   â”œâ”€â”€ App.jsx
â”‚   â”‚   â”œâ”€â”€ main.jsx
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ README.md
â”‚
â”‚â”€â”€ .gitignore
â”‚â”€â”€ README.md
```

---

# ðŸ—‚ What Each Folder Does

### **Backend**

* `prisma/schema.prisma` â†’ database models (User, ScholarshipApplication, enums).
* `config/db.js` â†’ Prisma client setup.
* `routes/` â†’ Express routes for auth, student, SAG, finance.
* `controllers/` â†’ business logic for each route.
* `middleware/authMiddleware.js` â†’ JWT role-based access.
* `utils/generateToken.js` â†’ function to generate JWT.
* `index.js` â†’ entry point (Express app).

### **Frontend**

* `components/` â†’ reusable UI (Navbar, UploadDocs, StatusCard).
* `pages/` â†’ main screens (Login, Register, dashboards).
* `context/AuthContext.jsx` â†’ global auth state.
* `services/api.js` â†’ Axios instance for API calls.
* `App.jsx` â†’ routes setup (React Router).

---

âš¡ With this structure you can:

* Run backend (`npm run dev`) â†’ APIs live
* Run frontend (`npm run dev`) â†’ UI live
* Connect React frontend â†’ Express backend â†’ Prisma DB

---